from collections import deque

def water_jug_solver(capacity_x, capacity_y, target):
    visited = set()
    queue = deque([(0, 0)])  # (x, y) represents the current state of the jugs
    steps = []

    while queue:
        x, y = queue.popleft()

        if (x, y) in visited:
            continue

        visited.add((x, y))
        steps.append((x, y))

        if x == target or y == target:
            return steps

        # Possible actions
        actions = [
            (capacity_x, y),  # Fill Jug X
            (x, capacity_y),  # Fill Jug Y
            (0, y),           # Empty Jug X
            (x, 0),           # Empty Jug Y
            (x - min(x, capacity_y - y), y + min(x, capacity_y - y)),  # Pour X -> Y
            (x + min(y, capacity_x - x), y - min(y, capacity_x - x))   # Pour Y -> X
        ]

        for action in actions:
            if action not in visited:
                queue.append(action)

    return None

# Example usage
capacity_x = 4
capacity_y = 3
target = 2

solution = water_jug_solver(capacity_x, capacity_y, target)
if solution:
    print("Steps to solve the water jug problem:")
    for step in solution:
        print(f"Jug X: {step[0]}, Jug Y: {step[1]}")
else:
    print("No solution found.")
